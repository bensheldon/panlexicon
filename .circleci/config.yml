---

defaults: &defaults
  working_directory: ~/panlexicon
  docker:
    - image: circleci/ruby:2.6.3-node-browsers
      environment:
        PGHOST: localhost
        PGUSER: panlexicon
        RAILS_ENV: test
    - image: postgres:10
      environment:
        POSTGRES_USER: panlexicon
        POSTGRES_DB: panlexicon_test
        POSTGRES_PASSWORD: ""

version: 2
jobs:
  install_dependencies:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore bundle cache
          keys:
            - v1-panlexicon-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - v1-panlexicon-{{ arch }}-
      - run: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3 --full-index
      - save_cache:
          name: Store bundle cache
          key: v1-panlexicon-{{ arch }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ./vendor/bundle

  lint:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore bundle cache
          keys:
            - v1-panlexicon-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - v1-panlexicon-{{ arch }}-
      - run: bundle --path vendor/bundle
      - run: bin/lint

  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore bundle cache
          keys:
            - v1-panlexicon-{{ arch }}-{{ checksum "Gemfile.lock" }}
            - v1-panlexicon-{{ arch }}-
      - run: bundle --path vendor/bundle
      - run: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: bundle exec rake db:test:prepare
      - run: bin/rails assets:precompile
      - run: mkdir ~/rspec
      - run: bundle exec rspec --format documentation --format RspecJunitFormatter -o ~/rspec/rspec.xml
      - store_test_results:
          path: ~/rspec
      - store_artifacts:
          path: tmp/screenshots
          destination: screenshots

  docker:
    machine: true
    working_directory: ~/panlexicon
    steps:
      - checkout
      - run:
          name: Install Docker Compose
          command: |
            curl -L https://github.com/docker/compose/releases/download/1.23.2/docker-compose-`uname -s`-`uname -m` > ~/docker-compose
            chmod +x ~/docker-compose
            sudo mv ~/docker-compose /usr/local/bin/docker-compose
      - run: docker-compose build
      - run: docker-compose run web bin/setup
      - run: docker-compose run web bin/rspec

  deploy:
    machine:
      enabled: true
    working_directory: ~/panlexicon
    steps:
      - checkout
      - run: "[[ ! -s \"$(git rev-parse --git-dir)/shallow\" ]] || git fetch --unshallow"
      - restore_cache:
          name: Restore Heroku CLI archive
          key: v2-heroku-cli-{{ arch }}
      - run:
          name: Download Heroku CLI archive
          command: |
            if [ ! -f heroku-linux-amd64.tar.gz ]; then
              wget https://cli-assets.heroku.com/branches/stable/heroku-linux-amd64.tar.gz
            fi
      - save_cache:
          name: Cache Heroku CLI archive
          key: v2-heroku-cli-{{ arch }}
          paths:
            - heroku-linux-amd64.tar.gz
      - run:
          name: Set up Heroku CLI
          command: |
            sudo mkdir -p /usr/local/lib /usr/local/bin
            sudo tar -xvzf heroku-linux-amd64.tar.gz -C /usr/local/lib
            sudo ln -s /usr/local/lib/heroku/bin/heroku /usr/local/bin/heroku

            cat > ~/.netrc << EOF
            machine api.heroku.com
              login $HEROKU_LOGIN
              password $HEROKU_API_KEY
            EOF
      - run: heroku git:remote -a panlexicon
      - run: git push https://heroku:$HEROKU_API_KEY@git.heroku.com/panlexicon.git $CIRCLE_SHA1:refs/heads/master

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - install_dependencies
      - lint:
          requires:
            - install_dependencies
      - build:
          requires:
            - install_dependencies
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master
      - docker:
          filters:
            branches:
              only: /^docker.*/

  docker_nightly:
    jobs:
      - docker
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
