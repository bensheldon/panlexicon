# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe SearchController do
  let(:search_query) { 'lion, tiger' }

  describe '#search' do
    use_moby_cats

    it 'returns a successful response' do
      get :search, params: { query: 'lion, tiger' }
      expect(response).to have_http_status(:ok)
    end
    it 'GET creates a new Search using :query' do
      get :search, params: { query: 'lion, tiger' }
      expect(assigns(:search).string).to eq(search_query)
    end

    it 'GET creates a new Search using :q' do
      get :search, params: { q: 'lion, tiger' }
      expect(assigns(:search).string).to eq(search_query)
    end

    it 'returns a 404 if the search does not generate results' do
      get :search, params: { q: 'wumpus' }
      expect(response).to have_http_status(:not_found)
    end

    it 'creates a SearchRecord' do
      expect do
        get :search, params: { q: 'lion, tiger' }
      end.to change(SearchRecord, :count).by(1)
    end

    context 'when a googlebot' do
      it 'does not create a SearchRecord' do
        request.env['HTTP_USER_AGENT'] = 'googlebot'

        expect do
          get :search, params: { q: 'lion, tiger' }
        end.not_to change(SearchRecord, :count)
      end
    end
  end

  describe '#redirect_post' do
    it 'POST redirects to the search action with query' do
      post :redirect_post, params: { query: search_query }
      expect(response).to redirect_to(action: 'search', query: search_query)
    end
  end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Search" do
  #       expect {
  #         post :create, {:search => valid_attributes}, valid_session
  #       }.to change(Search, :count).by(1)
  #     end

  #     it "assigns a newly created search as @search" do
  #       post :create, {:search => valid_attributes}, valid_session
  #       assigns(:search).should be_a(Search)
  #       assigns(:search).should be_persisted
  #     end

  #     it "redirects to the created search" do
  #       post :create, {:search => valid_attributes}, valid_session
  #       response.should redirect_to(Search.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved search as @search" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Search.any_instance.stub(:save).and_return(false)
  #       post :create, {:search => {  }}, valid_session
  #       assigns(:search).should be_a_new(Search)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Search.any_instance.stub(:save).and_return(false)
  #       post :create, {:search => {  }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested search" do
  #       search = Search.create! valid_attributes
  #       # Assuming there are no other searches in the database, this
  #       # specifies that the Search created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       Search.any_instance.should_receive(:update).with({ "these" => "params" })
  #       put :update, {:id => search.to_param, :search => { "these" => "params" }}, valid_session
  #     end

  #     it "assigns the requested search as @search" do
  #       search = Search.create! valid_attributes
  #       put :update, {:id => search.to_param, :search => valid_attributes}, valid_session
  #       assigns(:search).should eq(search)
  #     end

  #     it "redirects to the search" do
  #       search = Search.create! valid_attributes
  #       put :update, {:id => search.to_param, :search => valid_attributes}, valid_session
  #       response.should redirect_to(search)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the search as @search" do
  #       search = Search.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Search.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => search.to_param, :search => {  }}, valid_session
  #       assigns(:search).should eq(search)
  #     end

  #     it "re-renders the 'edit' template" do
  #       search = Search.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       Search.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => search.to_param, :search => {  }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested search" do
  #     search = Search.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => search.to_param}, valid_session
  #     }.to change(Search, :count).by(-1)
  #   end

  #   it "redirects to the searches list" do
  #     search = Search.create! valid_attributes
  #     delete :destroy, {:id => search.to_param}, valid_session
  #     response.should redirect_to(searches_url)
  #   end
  # end
end
